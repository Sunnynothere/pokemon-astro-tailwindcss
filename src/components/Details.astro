---
import { getPokemonImageUrl, fetchPokemonDetails } from '../pokemondata/pokemons/allpokemon';
import { getTypeColor } from '../pokemondata/pokemons/pokemonTypes';
import type { PokemonTypeString, PokemonType } from '../pokemondata/pokemons/pokemonTypes';

interface Props {
  id: string;
  pokemon: {
    name: string;
    url: string;
  };
}

const { id, pokemon } = Astro.props;

// Types
const response = await fetch(pokemon.url);
const pokemonData = await response.json();
const types: PokemonTypeString[] = pokemonData.types.map((type: PokemonType) => 
  type.type.name as PokemonTypeString
);

let detailsPokemon = null;
let error: string | null = null;

try {
  detailsPokemon = await fetchPokemonDetails(id);
} catch (e) {
  error = e instanceof Error ? e.message : 'An error occurred';
}

const imageUrl = getPokemonImageUrl(id);
---

<div class="bg-gradient-to-b from-sky-300 to-sky-500">
  {error ? (
    <div class="max-w-2xl mx-auto bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
      <strong class="font-bold">Error!</strong>
      <span class="block sm:inline"> {error}</span>
      <a href="/home" class="block mt-4 text-red-700 underline">Return to Home</a>
    </div>
  ) : (
    <div class="min-h-screen w-full h-full fixed inset-0 bg-gradient-to-b from-sky-300 to-sky-500">
        <div class="min-h-screen flex justify-center flex-col">
          <div class="max-w-[500px] w-full mx-auto p-4">
            <div class="bg-yellow-400 rounded-xl border-2 border-yellow-600">
              <div class="text-center bg-gradient-to-r from-yellow-200 to-yellow-300 m-3 rounded-lg p-4">
                <img 
                  src={imageUrl}
                  alt={pokemon.name}
                  class="w-[200px] h-[200px] inline-block"
                />
              </div>

              <div id="statsContainer" class="bg-[#f4e4bc] mx-3 mb-3 p-4 rounded-lg">
                <h1 class="text-2xl font-bold capitalize text-center mb-4">{pokemon.name}</h1>

                <div class="grid grid-cols-2 gap-4 text-center">
                  <h3 class="text-lg font-bold">HP: {detailsPokemon?.hp}</h3>
                  <h3 class="text-lg font-bold">Attack: {detailsPokemon?.attack}</h3>
                  <h3 class="text-lg font-bold">Defense: {detailsPokemon?.defense}</h3>
                  <h3 class="text-lg font-bold">Speed: {detailsPokemon?.speed ?? 'Does not have speed'}</h3>
                  <h3 class="text-lg font-bold">Height: {detailsPokemon?.height ?? 'Does not have height'}</h3>
                  <h3 class="text-lg font-bold">Weight: {detailsPokemon?.weight ?? 'Does not have weight'}</h3>
                </div>

                <div class="flex flex-wrap gap-2 justify-center mb-4 pt-10"> 
                  {types.map((type: PokemonTypeString) => (
                    <span class={`px-3 py-1 rounded text-white text-sm ${getTypeColor(type)}`}>
                      {type}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div class="mt-6 text-center">
            <a 
              href="/home" 
              class="inline-block bg-yellow-400 hover:bg-yellow-500 text-black px-6 py-2 rounded-lg transition-colors"
            >
              Back to List
            </a>
          </div>
        </div>
    </div>
  )}
</div>

<style>
  .opacity-0 {
    position: relative;
  }
  .opacity-0::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>

<script>
  const statsContainer = document.getElementById('statsContainer');
  if (statsContainer) {
    statsContainer.classList.add('opacity-0');
    setTimeout(() => {
      statsContainer.classList.remove('opacity-0');
      statsContainer.classList.add('opacity-100', 'transition-opacity', 'duration-500');
    }, 300);
  }
</script>