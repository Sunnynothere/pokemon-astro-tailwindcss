---
// src/components/Details.astro
import type { PokemonBasic, PokemonDetails, PokemonStats } from '../types/pokemon';

interface Props {
  id: string;
  pokemon: PokemonBasic;
}

const { id, pokemon } = Astro.props;

let detailsPokemon: PokemonStats | null = null;
let error: string | null = null;

try {
  const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
  if (!response.ok) throw new Error('Failed to fetch Pokemon details');
  
  const pokemonData = await response.json() as PokemonDetails;
  detailsPokemon = {
    hp: pokemonData.stats.find(stat => stat.stat.name === 'hp')?.base_stat || 0,
    attack: pokemonData.stats.find(stat => stat.stat.name === 'attack')?.base_stat || 0,
    defense: pokemonData.stats.find(stat => stat.stat.name === 'defense')?.base_stat || 0,
    speed: pokemonData.stats.find(stat => stat.stat.name === 'speed')?.base_stat,
    height: pokemonData.height,
    weight: pokemonData.weight
  };
} catch (e) {
  error = e instanceof Error ? e.message : 'An error occurred';
}
---

{error ? (
  <div class="max-w-2xl mx-auto bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
    <strong class="font-bold">Error!</strong>
    <span class="block sm:inline"> {error}</span>
    <a href="/home" class="block mt-4 text-red-700 underline">Return to Home</a>
  </div>
) : (
  <div class="max-w-2xl mx-auto bg-yellow-400 rounded-lg p-6">
    <div class="text-center">
      <img 
        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}
        alt={pokemon.name}
        class="w-48 h-48 mx-auto"
      />
      <h1 class="text-3xl font-bold capitalize mb-6">{pokemon.name}</h1>
    </div>

    <div id="statsContainer" class="grid grid-cols-2 gap-4 bg-[#dbc76a] p-6 rounded-lg">
      <h3 class="text-lg">HP: {detailsPokemon?.hp}</h3>
      <h3 class="text-lg">Attack: {detailsPokemon?.attack}</h3>
      <h3 class="text-lg">Defense: {detailsPokemon?.defense}</h3>
      <h3 class="text-lg">Speed: {detailsPokemon?.speed ?? 'Does not have speed'}</h3>
      <h3 class="text-lg">Height: {detailsPokemon?.height ?? 'Does not have height'}</h3>
      <h3 class="text-lg">Weight: {detailsPokemon?.weight ?? 'Does not have weight'}</h3>
    </div>

    <div class="mt-6 text-center">
      <a 
        href="/home" 
        class="inline-block bg-yellow-500 hover:bg-yellow-600 text-black px-6 py-2 rounded-lg transition-colors"
      >
        Back to List
      </a>
    </div>
  </div>
)}

<style>
  .opacity-0 {
    position: relative;
  }
  .opacity-0::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>

<script>
  const statsContainer = document.getElementById('statsContainer');
  if (statsContainer) {
    statsContainer.classList.add('opacity-0');
    setTimeout(() => {
      statsContainer.classList.remove('opacity-0');
      statsContainer.classList.add('opacity-100', 'transition-opacity', 'duration-500');
    }, 300);
  }
</script>